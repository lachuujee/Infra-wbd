name: Terraform WBD sandbox (Terragrunt)

on:
  workflow_dispatch:
    inputs:
      intake_id:
        description: "users/<INTAKE_ID> (e.g., intake_001)"
        required: true
        default: "intake_001"

jobs:
  tf:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: us-east-1
      INTAKE_DIR: live/sandbox/users/${{ github.event.inputs.intake_id }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 1) Load creds from single JSON secret and export to job env
      - name: Export AWS credentials from INFRA_WBD_SECRET
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          # Read the secret JSON
          creds='${{ secrets.INFRA_WBD_SECRET }}'

          # Extract values
          AKID=$(jq -r '.AWS_ACCESS_KEY_ID // empty' <<< "$creds")
          SAK=$(jq -r '.AWS_SECRET_ACCESS_KEY // empty' <<< "$creds")

          # Validate (fail early if missing)
          if [[ -z "$AKID" || -z "$SAK" ]]; then
            echo "::error title=Missing keys in INFRA_WBD_SECRET::Expected JSON with AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY"
            exit 1
          fi

          # Export for all subsequent steps
          {
            echo "AWS_ACCESS_KEY_ID=$AKID"
            echo "AWS_SECRET_ACCESS_KEY=$SAK"
          } >> "$GITHUB_ENV"

          # Non-sensitive confirmation (lengths only)
          echo "Loaded AWS_ACCESS_KEY_ID (len=${#AKID}), AWS_SECRET_ACCESS_KEY (len=${#SAK})"

      # 2) Quick sanity check that env vars are visible to this step
      - name: Verify AWS env presence
        shell: bash
        run: |
          set -euo pipefail
          [[ -n "${AWS_ACCESS_KEY_ID:-}" ]] || { echo "::error ::AWS_ACCESS_KEY_ID not set"; exit 1; }
          [[ -n "${AWS_SECRET_ACCESS_KEY:-}" ]] || { echo "::error ::AWS_SECRET_ACCESS_KEY not set"; exit 1; }
          echo "AWS env variables are present."

      # 3) Now AWS CLI should be able to read credentials from env
      - name: Show caller identity (should be DESTINATION account)
        run: aws sts get-caller-identity

      - name: Install Terraform
        run: |
          curl -sSLo terraform.zip https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
          sudo unzip -o terraform.zip -d /usr/local/bin
          terraform -version

      - name: Install Terragrunt
        run: |
          TG_VERSION=0.66.9
          curl -sSL -o terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64
          sudo install -m 0755 terragrunt /usr/local/bin/terragrunt
          terragrunt --version

      - name: Plan & Apply (IAM → S3 → VPC → KeyPair → EC2)
        shell: bash
        run: |
          set -euo pipefail

          apply_if_exists () {
            local dir="$1"
            if [[ -d "$dir" ]]; then
              echo "::group::Applying $dir"
              cd "$dir"
              terragrunt init -upgrade --terragrunt-non-interactive
              terragrunt validate --terragrunt-non-interactive
              terragrunt plan -out=tfplan.bin --terragrunt-non-interactive
              terragrunt apply -auto-approve tfplan.bin --terragrunt-non-interactive
              cd - >/dev/null
              echo "::endgroup::"
            else
              echo "SKIP: $dir (not present)"
            fi
          }

          # Ensure parent marker exists for find_in_parent_folders() lookups
          if [[ ! -f "$INTAKE_DIR/terragrunt.hcl" ]]; then
            echo "locals {}" > "$INTAKE_DIR/terragrunt.hcl"
          fi

          apply_if_exists "$INTAKE_DIR/iam"
          apply_if_exists "$INTAKE_DIR/s3"
          apply_if_exists "$INTAKE_DIR/vpc"
          apply_if_exists "$INTAKE_DIR/keypair"
          apply_if_exists "$INTAKE_DIR/ec2"
